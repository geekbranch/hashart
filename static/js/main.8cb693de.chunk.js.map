{"version":3,"sources":["components/Splitter/Splitter.js","components/Hash/gen-hash.js","components/form/form.js","utils/hash.js","components/form/formContainer.js","shared/customCell/CustomCell.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Splitter","leftPane","rightPane","split","defaultSize","Component","Form","text","algorithms","selectedAlgorithm","onTextChange","onComboBoxChange","onSubmitClick","onResetClick","Pane","display","padding","borderRadius","flex","alignItems","TextInput","placeholder","onChange","value","Combobox","items","selectedItem","openOnFocus","Button","appearance","intent","marginRight","onClick","gridHexColors","algorithm","data","hash","string","crypto","createHash","update","digest","generateHash","grid","i","length","push","mapper","FormContainer","computeColorArray","useState","setText","setSelectedAlgorithm","dataHexCode","setDataHexCode","useEffect","console","log","e","target","selected","CustomCell","colorHex","customStyle","className","key","style","Chart","colorArray","id","map","item","background","App","setColorArray","cArray","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cb693de.chunk.js","sourcesContent":["import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport PropTypes from 'prop-types';\nimport \"./Spiltter.css\"\n\nfunction Splitter({leftPane, rightPane}) {\n  return (\n    <SplitPane split=\"vertical\" defaultSize=\"50%\" >\n      <div>{leftPane}</div>\n        <div>{rightPane}</div>\n    </SplitPane>\n\n  )\n}\n\nSplitter.propTypes = {\n  leftPane: PropTypes.element.isRequired,\n  rightPane: PropTypes.element.isRequired\n};\n\nexport default Splitter;\n","import React, { Component } from \"react\";\r\nimport { TextInput, Button, Combobox } from \"evergreen-ui\";\r\nimport crypto from \"crypto\";\r\nimport mapper from \"./color-mapper.json\";\r\n\r\nclass genHash extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: \"\",\r\n      algorithmOptions: [\"md5\", \"sha1\", \"sha256\", \"sha512\"],\r\n      algorithm: \"sha256\",\r\n      dataHexCode: []\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    // console.log(event);\r\n\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  generateHash = (algorithm, data) => {\r\n    try {\r\n      const hash = crypto.createHash(algorithm);\r\n\r\n      hash.update(data);\r\n\r\n      const dataHash = hash.digest(\"hex\");\r\n      this.setState({\r\n        dataHexCode: dataHash\r\n      });\r\n      console.log(dataHash, typeof dataHash);\r\n      return {\r\n        status: true,\r\n        message: dataHash\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      return {\r\n        status: false,\r\n        message: \"Something went wrong!\"\r\n      };\r\n    }\r\n  };\r\n\r\n  gridHexColors = (algorithm, data) => {\r\n    let hash = this.generateHash(algorithm, data).message.split(\"\");\r\n\r\n    let grid = [];\r\n    for (let i = 0; i < hash.length; i++) {\r\n      grid.push(mapper[hash[i]]);\r\n    }\r\n    // console.log(grid);\r\n    this.setState({\r\n      dataHexCode: grid\r\n    }, () => {\r\n      this.props.computeColorArray(this.state.dataHexCode) \r\n    });\r\n  };\r\n\r\n  render() {\r\n    //this.generateHash(\"sha256\", \"shubham\");\r\n    return (\r\n      <div>\r\n        <TextInput\r\n          name=\"data\"\r\n          placeholder=\"Text input placeholder...\"\r\n          onChange={this.onChange}\r\n          value={this.state.data}\r\n        />\r\n        <Combobox\r\n          width={100}\r\n          defaultSelectedItem={\"sha256\"}\r\n          items={this.state.algorithmOptions}\r\n          onChange={value =>\r\n            this.onChange({\r\n              target: {\r\n                name: \"algorithm\",\r\n                value: value\r\n              }\r\n            })\r\n          }\r\n          placeholder=\"Algorithm\"\r\n          openOnFocus\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            this.props.computeColorArray([]) \r\n            this.gridHexColors(this.state.algorithm, this.state.data)\r\n          }\r\n          }\r\n        >\r\n          my hash\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default genHash;\r\n","import React from \"react\";\nimport { Pane, Button, Text, Heading, TextInput, Combobox } from \"evergreen-ui\";\n\nconst Form = ({\n  text,\n  algorithms,\n  selectedAlgorithm,\n  onTextChange,\n  onComboBoxChange,\n  onSubmitClick,\n  onResetClick\n}) => {\n  return (\n    <Pane>\n      <Pane display=\"flex\" padding={16} borderRadius={3}>\n        <Pane flex={1} alignItems=\"center\" display=\"flex\">\n          <TextInput\n            placeholder=\"Text input\"\n            onChange={onTextChange}\n            value={text}\n          />\n        </Pane>\n      </Pane>\n\n      <Pane padding={16} borderRadius={3}>\n        <Combobox\n          items={algorithms}\n          selectedItem={selectedAlgorithm}\n          placeholder=\"Algorithm\"\n          onChange={onComboBoxChange}\n          openOnFocus\n        />\n      </Pane>\n\n      <Pane padding={16} borderRadius={3}>\n        <Button\n          appearance=\"success\"\n          intent=\"success\"\n          marginRight={16}\n          onClick={onSubmitClick}\n        >\n          Submit\n        </Button>\n        <Button appearance=\"success\" intent=\"danger\" onClick={onResetClick}>\n          Reset\n        </Button>\n      </Pane>\n    </Pane>\n  );\n};\n\nexport default Form;\n//<Heading size={600}>Left Aligned</Heading>\n","import crypto from \"crypto\";\nimport mapper from \"./color-mapper.json\";\n\nconst generateHash = (algorithm, string) => {\n  const hash = crypto.createHash(algorithm);\n  hash.update(string);\n  const dataHash = hash.digest(\"hex\");\n\n  return dataHash;\n};\n\nconst gridHexColors = (algorithm, data) => {\n  const hash = generateHash(algorithm, data).split(\"\");\n\n  const grid = [];\n  for (let i = 0; i < hash.length; i++) {\n    grid.push(mapper[hash[i]]);\n  }\n\n  return grid;\n};\n\nexport default gridHexColors;\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"./form.js\";\nimport gridHexColors from \"../../utils/hash.js\";\n\nconst FormContainer = ({ computeColorArray }) => {\n  const [text, setText] = useState(\"\");\n  const [algorithms, setAlgorithms] = useState([\n    \"md5\",\n    \"sha1\",\n    \"sha256\",\n    \"sha512\"\n  ]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\"sha256\");\n  const [dataHexCode, setDataHexCode] = useState([]);\n\n  useEffect(() => {\n    computeColorArray(dataHexCode);\n    console.log(dataHexCode)\n  }, [dataHexCode]);\n\n  const onTextChange = e => {\n    setText(e.target.value);\n  };\n\n  const onComboBoxChange = selected => {\n    setSelectedAlgorithm(selected);\n  };\n\n  const onSubmitClick = () => {\n    computeColorArray([]);\n    setDataHexCode(gridHexColors(selectedAlgorithm, text));\n  };\n\n  const onResetClick = () => {\n    computeColorArray([]);\n    setText(\"\");\n    setSelectedAlgorithm(\"sha256\");\n  };\n\n  return (\n    <Form\n      text={text}\n      algorithms={algorithms}\n      onSubmitClick={onSubmitClick}\n      onResetClick={onResetClick}\n      selectedAlgorithm={selectedAlgorithm}\n      onTextChange={onTextChange}\n      onComboBoxChange={onComboBoxChange}\n    />\n  );\n};\n\nexport default FormContainer;\n","import React from \"react\";\nimport \"./CustomCell.css\";\n\n\nconst CustomCell = ({colorHex, customStyle}) => {\n  //return <div className=\"cell\" key={colorHex} style={customStyle}></div>\n  return <div className=\"flex-square\" key={colorHex} style={customStyle}></div>\n}\n\nexport default CustomCell;\n","import React from \"react\";\nimport CustomCell from \"../../shared/customCell/CustomCell.js\";\nimport \"./Chart.css\";\n\nconst Chart = ({ colorArray }) => {\n  const totalBlocks = colorArray.length;\n\n  return (\n    <div>\n      <div id=\"grid\">\n        {colorArray.map(item => {\n          const style = {\n            background: item\n          };\n          return <CustomCell colorHex={item} key={item} customStyle={style} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState } from \"react\";\nimport { Button } from \"evergreen-ui\";\nimport Splitter from \"./components/Splitter/Splitter.js\";\nimport Hash from \"./components/Hash/gen-hash.js\";\nimport Form from \"./components/form/formContainer.js\";\nimport Chart from \"./components/Chart/Chart.js\";\n\nfunction App() {\n  const [colorArray, setColorArray] = useState([]);\n\n  const computeColorArray = cArray => {\n    setColorArray(cArray);\n  };\n\n  return (\n    <div>\n      <Splitter\n        leftPane={<Form computeColorArray={computeColorArray} />}\n        rightPane={<Chart colorArray={colorArray} />}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}