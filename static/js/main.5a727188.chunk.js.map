{"version":3,"sources":["components/Splitter/Splitter.js","components/Hash/gen-hash.js","shared/customCell/CustomCell.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Splitter","leftPane","rightPane","split","defaultSize","genHash","props","onChange","event","setState","target","name","value","generateHash","algorithm","data","hash","crypto","createHash","update","dataHash","digest","dataHexCode","console","log","status","message","error","gridHexColors","grid","i","length","push","mapper","computeColorArray","state","algorithmOptions","TextInput","placeholder","this","Combobox","width","defaultSelectedItem","items","openOnFocus","Button","onClick","Component","CustomCell","colorHex","customStyle","className","key","style","Chart","colorArray","id","map","item","background","App","useState","setColorArray","cArray","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"upBAoBeA,MAff,YAA0C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,UAC3B,OACE,kBAAC,IAAD,CAAWC,MAAM,WAAWC,YAAY,OACtC,6BAAMH,GACJ,6BAAMC,K,uFC8FCG,E,YAjGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,SAAW,SAAAC,GAGT,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAfnB,EAmBnBC,aAAe,SAACC,EAAWC,GACzB,IACE,IAAMC,EAAOC,IAAOC,WAAWJ,GAE/BE,EAAKG,OAAOJ,GAEZ,IAAMK,EAAWJ,EAAKK,OAAO,OAK7B,OAJA,EAAKZ,SAAS,CACZa,YAAaF,IAEfG,QAAQC,IAAIJ,SAAiBA,GACtB,CACLK,QAAQ,EACRC,QAASN,GAEX,MAAOO,GAEP,OADAJ,QAAQI,MAAMA,GACP,CACLF,QAAQ,EACRC,QAAS,2BAtCI,EA2CnBE,cAAgB,SAACd,EAAWC,GAI1B,IAHA,IAAIC,EAAO,EAAKH,aAAaC,EAAWC,GAAMW,QAAQvB,MAAM,IAExD0B,EAAO,GACFC,EAAI,EAAGA,EAAId,EAAKe,OAAQD,IAC/BD,EAAKG,KAAKC,EAAOjB,EAAKc,KAGxB,EAAKrB,SAAS,CACZa,YAAaO,GACZ,WACD,EAAKvB,MAAM4B,kBAAkB,EAAKC,MAAMb,gBAnD1C,EAAKa,MAAQ,CACXpB,KAAM,GACNqB,iBAAkB,CAAC,MAAO,OAAQ,SAAU,UAC5CtB,UAAW,SACXQ,YAAa,IAPE,E,sEA0DT,IAAD,OAEP,OACE,6BACE,kBAACe,EAAA,EAAD,CACE1B,KAAK,OACL2B,YAAY,4BACZ/B,SAAUgC,KAAKhC,SACfK,MAAO2B,KAAKJ,MAAMpB,OAEpB,kBAACyB,EAAA,EAAD,CACEC,MAAO,IACPC,oBAAqB,SACrBC,MAAOJ,KAAKJ,MAAMC,iBAClB7B,SAAU,SAAAK,GAAK,OACb,EAAKL,SAAS,CACZG,OAAQ,CACNC,KAAM,YACNC,MAAOA,MAIb0B,YAAY,YACZM,aAAW,IAEb,kBAACC,EAAA,EAAD,CACEC,QAAS,WACP,EAAKxC,MAAM4B,kBAAkB,IAC7B,EAAKN,cAAc,EAAKO,MAAMrB,UAAW,EAAKqB,MAAMpB,QAHxD,gB,GApFcgC,aCIPC,G,OALI,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAE7B,OAAO,yBAAKC,UAAU,cAAcC,IAAKH,EAAUI,MAAOH,MCe7CI,G,OAjBD,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACKA,EAAWxB,OAE/B,OACE,6BACE,yBAAKyB,GAAG,QACLD,EAAWE,IAAI,SAAAC,GACd,IAAML,EAAQ,CACZM,WAAYD,GAEd,OAAO,kBAAC,EAAD,CAAYT,SAAUS,EAAMN,IAAKM,EAAMR,YAAaG,UCetDO,MAvBf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNN,EADM,KACMO,EADN,KAOb,OACE,6BACE,kBAACjB,EAAA,EAAD,8BACA,kBAAC,EAAD,CACE5C,SACE,2BACG,IACD,kBAAC,EAAD,CAAMiC,kBAXU,SAAA6B,GACxBD,EAAcC,OAaV7D,UAAW,kBAAC,EAAD,CAAOqD,WAAYA,QCXlBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5a727188.chunk.js","sourcesContent":["import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport PropTypes from 'prop-types';\nimport \"./Spiltter.css\"\n\nfunction Splitter({leftPane, rightPane}) {\n  return (\n    <SplitPane split=\"vertical\" defaultSize=\"50%\" >\n      <div>{leftPane}</div>\n        <div>{rightPane}</div>\n    </SplitPane>\n\n  )\n}\n\nSplitter.propTypes = {\n  leftPane: PropTypes.element.isRequired,\n  rightPane: PropTypes.element.isRequired\n};\n\nexport default Splitter;\n","import React, { Component } from \"react\";\r\nimport { TextInput, Button, Combobox } from \"evergreen-ui\";\r\nimport crypto from \"crypto\";\r\nimport mapper from \"./color-mapper.json\";\r\n\r\nclass genHash extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: \"\",\r\n      algorithmOptions: [\"md5\", \"sha1\", \"sha256\", \"sha512\"],\r\n      algorithm: \"sha256\",\r\n      dataHexCode: []\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    // console.log(event);\r\n\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  generateHash = (algorithm, data) => {\r\n    try {\r\n      const hash = crypto.createHash(algorithm);\r\n\r\n      hash.update(data);\r\n\r\n      const dataHash = hash.digest(\"hex\");\r\n      this.setState({\r\n        dataHexCode: dataHash\r\n      });\r\n      console.log(dataHash, typeof dataHash);\r\n      return {\r\n        status: true,\r\n        message: dataHash\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      return {\r\n        status: false,\r\n        message: \"Something went wrong!\"\r\n      };\r\n    }\r\n  };\r\n\r\n  gridHexColors = (algorithm, data) => {\r\n    let hash = this.generateHash(algorithm, data).message.split(\"\");\r\n\r\n    let grid = [];\r\n    for (let i = 0; i < hash.length; i++) {\r\n      grid.push(mapper[hash[i]]);\r\n    }\r\n    // console.log(grid);\r\n    this.setState({\r\n      dataHexCode: grid\r\n    }, () => {\r\n      this.props.computeColorArray(this.state.dataHexCode) \r\n    });\r\n  };\r\n\r\n  render() {\r\n    //this.generateHash(\"sha256\", \"shubham\");\r\n    return (\r\n      <div>\r\n        <TextInput\r\n          name=\"data\"\r\n          placeholder=\"Text input placeholder...\"\r\n          onChange={this.onChange}\r\n          value={this.state.data}\r\n        />\r\n        <Combobox\r\n          width={100}\r\n          defaultSelectedItem={\"sha256\"}\r\n          items={this.state.algorithmOptions}\r\n          onChange={value =>\r\n            this.onChange({\r\n              target: {\r\n                name: \"algorithm\",\r\n                value: value\r\n              }\r\n            })\r\n          }\r\n          placeholder=\"Algorithm\"\r\n          openOnFocus\r\n        />\r\n        <Button\r\n          onClick={() => {\r\n            this.props.computeColorArray([]) \r\n            this.gridHexColors(this.state.algorithm, this.state.data)\r\n          }\r\n          }\r\n        >\r\n          my hash\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default genHash;\r\n","import React from \"react\";\nimport \"./CustomCell.css\";\n\n\nconst CustomCell = ({colorHex, customStyle}) => {\n  //return <div className=\"cell\" key={colorHex} style={customStyle}></div>\n  return <div className=\"flex-square\" key={colorHex} style={customStyle}></div>\n}\n\nexport default CustomCell;\n","import React from \"react\";\nimport CustomCell from \"../../shared/customCell/CustomCell.js\";\nimport \"./Chart.css\";\n\nconst Chart = ({ colorArray }) => {\n  const totalBlocks = colorArray.length;\n\n  return (\n    <div>\n      <div id=\"grid\">\n        {colorArray.map(item => {\n          const style = {\n            background: item\n          };\n          return <CustomCell colorHex={item} key={item} customStyle={style} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState } from \"react\";\nimport { Button } from \"evergreen-ui\";\nimport Splitter from \"./components/Splitter/Splitter.js\";\nimport Hash from \"./components/Hash/gen-hash.js\";\nimport Chart from \"./components/Chart/Chart.js\";\n\nfunction App() {\n  const [colorArray, setColorArray] = useState([]);\n\n  const computeColorArray = cArray => {\n    setColorArray(cArray);\n  };\n\n  return (\n    <div>\n      <Button>I am using Evergreen!</Button>\n      <Splitter\n        leftPane={\n          <p>\n            {\" \"}\n            <Hash computeColorArray={computeColorArray}></Hash>\n          </p>\n        }\n        rightPane={<Chart colorArray={colorArray} />}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}